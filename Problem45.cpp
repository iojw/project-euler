/*Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.*/

#include <iostream>
#include <cmath>
#include <ttmath/ttmath.h>
#include <ttmath/ttmathbig.h>
using namespace std;

//extra function just for knowldge and reference.
bool isTri(int num){
	long double answ=sqrt(8*num+1);
	cout<<answ<<endl;
	if (floor(answ)==answ)
		return true;
	else
		return false;
}

//extra function just for knowldge and reference.
bool isHex(unsigned long long int num){
	ttmath::Big<1,2> ans=(sqrt(8*num+1)+1)/4;
	//cout<<ans<<endl;
	if (ans.IsInteger())
			return true;
	else
		return false;
}

bool isPenta(long long num){
	ttmath::Big<1,2> ans=(sqrt(24*num+1)+1)/6;
	if (ans.IsInteger())
		return true;
	else
		return false;
}

int main()
{
	clock_t startTime = clock();
	for (int i = 144; ; ++i)
	{
		long long hex=(i*2-1)*i;
		if (isPenta(hex)==true)
			{cout<<hex<<endl<<i<<endl;break;}
	}
	cout << "Execution Time: "<<double( clock() - startTime ) / (double)CLOCKS_PER_SEC<< " seconds." << endl;
	return 0;
}